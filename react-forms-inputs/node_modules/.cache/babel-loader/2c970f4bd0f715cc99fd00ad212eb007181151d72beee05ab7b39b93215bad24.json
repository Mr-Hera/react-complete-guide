{"ast":null,"code":"var _jsxFileName = \"/home/randell/udemy-courses/react/react-complete-guide/react-forms-inputs/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.match(pattern));\n  const pattern = /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/;\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const formSubmissionHandler = e => {\n    e.preventDefault();\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid) {\n      return;\n    }\n    if (!enteredEmailIsValid) {\n      return;\n    }\n    console.log(\"Name - \", enteredName);\n    console.log(\"Email - \", enteredEmail);\n\n    // below works but not the cleanest way to do it\n    // nameInputRef.current.value = '';\n    resetNameInput();\n    resetEmailInput();\n  };\n  const nameInputClasses = nameInputHasError && emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName,\n        type: \"text\",\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail,\n        type: \"email\",\n        id: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"AanX4t+gpBZZAMPHHkoVWhOOxYM=\", false, function () {\n  return [useInput, useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","match","pattern","formIsValid","formSubmissionHandler","e","preventDefault","setEnteredEmailTouched","console","log","nameInputClasses","emailInputIsInvalid","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onBlur","type","id","emailInputChangeHandler","emailInputBlurHandler","disabled","_c","$RefreshReg$"],"sources":["/home/randell/udemy-courses/react/react-complete-guide/react-forms-inputs/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from 'react'\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.match(pattern));\n\n  const pattern = /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/;\n\n  let formIsValid = false;\n\n  if(enteredNameIsValid && enteredEmailIsValid ) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (e) => {\n    e.preventDefault();\n\n    setEnteredEmailTouched(true);\n\n    if(!enteredNameIsValid) {\n      return;\n    }\n\n    if(!enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"Name - \", enteredName);\n    console.log(\"Email - \", enteredEmail);\n\n    // below works but not the cleanest way to do it\n    // nameInputRef.current.value = '';\n    resetNameInput();\n    resetEmailInput();\n  }\n\n  const nameInputClasses = nameInputHasError && emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n          type='text'\n          id='name'\n        />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n\n        <label htmlFor='name'>Your Email</label>\n        <input\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n          type='email'\n          id='email'\n        />\n        {emailInputHasError && <p className=\"error-text\">Email must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}